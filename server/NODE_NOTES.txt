SETUP:
npm init -y
    - initialize empty package.json
    - ...which is used to install necessary dependencies
    - ...and that records important metadata about a project which is required before publishing to NPM

npm install bodyparser cors express nodemon mongoose
    bodyparser: allows us to send post requests
    cors: https://www.youtube.com/watch?v=4KHiSt0oLJ0
    express: framework for routing our application
    nodemon: avoiding manually restarting the server when making changes
    mongoose: used to connect to mongodb

*note: you'll still have to import these dependencies directly into the .js file*

In order to allow 'import ___ from ___' syntax...
    1. go to package.json
    2. under "main" add 
        "type": "module"
    3. check to make sure everything is spelled correctly (or copy/paste)

Within index.js, add these lines of code:
    !!!CODE BLOCK!!!
    import express from 'express';
    import bodyParser from 'body-parser';
    import cors from 'cors';

    const app = express();

    app.use(bodyParser.json({ limit: "30mb", extended: true}));
    app.use(bodyParser.urlencoded({ limit: "30mb", extended: true}));
    app.use(cors()); 
    !!!END!!!

THAT CONCLUDES SETUP
 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MONGODB:
Follow these commands in the zsh command line to install mongodb properly
    brew tap mongodb/brew
    brew install mongodb-community@5.0

Install mongodb compass if needed

Service starting and stopping:
    brew services start mongodb-community@5.0
    brew services stop mongodb-community@5.0

Make sure to have this code in the server side index.js file:
    !!!CODE BLOCK!!!
    const CONNECTION_URL = 'mongodb://localhost/database';
    const PORT = process.env.PORT || 3000;

    mongoose.connect(CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology: true})
        .then(()=> app.listen(PORT, ()=> console.log(`connected: ${PORT}`)))
        .catch((error)=> console.log(`not connected:  ${error}`));

    mongoose.set('useFindAndModify', false);
    !!!END!!!

Breakdown:
    line1: connection url for the server to reach out to
    line2: instantiating a port, later through .env file
    line3: mongoose integrated connect command (the curly brackets have rules to avoid any deprecation at runtime)
    line4: once connected to the url, we start our backend and console log the port being used
    line5: catching any errors and console logging that
    line6: used to avoid any runtime deprecation

In the server package.json file:
    Inside "scripts": {...}
        add     "start": "nodemon index.js"

Now to run the server, just run npm start inside the server folder

THAT CONCLUDES MONGODB SETUP

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ROUTING:

1. New folder in server called routes
2. Add a file called posts.js (for posts)
3. Add these lines of code into the posts.js file:
    !!!CODE BLOCK!!!
    import express from 'express';

    const router = express.Router();

    router.get('/', (req, res)=> {
        res.send('THIS WORKS!');
    });

    export default router;
    !!!END!!!

Breakdown:
    line1: importing express
    line2: taking advantage of express' routing commands
    line3: post request for page "localhost:3000/"
    line4: respond with 'THIS WORKS!' in the web
    line5: